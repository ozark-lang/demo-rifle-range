class Rifleman
	inheritance Soldier source:"Soldier"

	requirement StandardIO reference:"StandardIO"
	requirement Gun source:"Gun"
	requirement Bullet.Casing source:"Bullet"
	requirement Smoke source:"Smoke"
	requirement Target source:"Target"
	requirement Mood source:"Mood"
	requirement Hat source:"Hat"

	class ShootAbility
		inheritance Ability source:"Ability"

		requirement Gun source:"Gun"
		requirement Target source:"Target"
		requirement Bullet.Casing source:"Bullet"
		requirement Smoke source:"Smoke"

		reference Calculus source:"Calculus"

		enumeration SkillLevel
			state Novice
			state Intermediate
			state Expert

		member skill:SkillLevel

		continuation initialize ~skill:SkillLevel
			set .skill <- skill

		method fireGunAtTarget gun:Gun target:Target -> casing:Bullet.Casing smoke:Smoke
			gun shootAtTarget target -> casing:casing1 smoke:smoke1

			set casing <- casing1
			set smoke <- smoke1

	class CelebrateAbility
		inheritance Ability source:"Ability"

		requirement StandardIO reference:"StandardIO"
		requirement Hat source:"Hat"

		class HatTipAbility
			inheritance Ability source:"Ability"

			requirement Hat source:"Hat"

			method tipHat input:Hat
				input getTipped

		member io:StandardIO
		member hatTipper:HatTipAbility

		continuation initialize
			.io initialize
			.hatTipper initialize

		continuation initialize ~io:StandardIO
			set .io <- io
			.hatTipper initialize

		method showOffForTheCrowd hat:Hat
			.hatTipper tipHat:hat
			.io print "Hello, ladies."

	member io:StandardIO
	member shooter:ShootAbility
	member celebrator:CelebrateAbility
	member gun:Gun
	member hat:Hat

	property mood:Mood
	property fieldGuides:Dictionary by String of String

	continuation initialize
		create io:StandardIO initialize
		create shooter:ShootAbility initialize
		create celebrator:CelebrateAbility initialize io:io
		create gun:Gun initialize
		create hat:Hat initialize

		set .io <- io
		set .shooter <- shooter
		set .celebrator <- celebrator
		set .mood <- Mood.happy
		set .gun <- gun
		set .hat <- hat

	continuation initialize ~io:StandardIO
		create shooter:ShootAbility initialize
		create celebrator:CelebrateAbility initialize io:io
		create gun:Gun initialize
		create hat:Hat initialize

		set .io <- io
		set .shooter <- shooter
		set .celebrator <- celebrator
		set .mood <- Mood.happy
		set .gun <- gun
		set .hat <- hat

	method shootEveryOtherTarget input:Array of Target -> casings:Array of Bullet.Casing smoke:Smoke success:Boolean
		create theCasings:Array of Bullet.Casing initialize
		create theSmoke:Smoke initialize
		create successes:Array of Boolean initialize

		input oddItems -> oddItems
		oddItems keys -> keys

		for key in:keys
			oddItems objectAt key -> i
			shooter shootAtTarget i -> success:success
			successes push success

		successes all true -> all

		if all
			.celebrator showOffForTheCrowd hat:.hat
			set .mood <- Mood.happy

		set casings <- theCasings
		set smoke <- theSmoke
		set success <- all